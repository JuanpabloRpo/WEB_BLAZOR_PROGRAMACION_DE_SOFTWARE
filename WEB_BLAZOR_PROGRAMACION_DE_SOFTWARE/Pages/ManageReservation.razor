@page "/ManageReservation"
@using WEB_BLAZOR_PROGRAMACION_DE_SOFTWARE.Entities
@using WEB_BLAZOR_PROGRAMACION_DE_SOFTWARE.Interfaces
@using WEB_BLAZOR_PROGRAMACION_DE_SOFTWARE.Services
@inject UserSessionService session
@inject IReservationService reservation
@inject IMaterialService materialService
@inject IUserService userService
@inject ILoanService loan

@if (isLoading)
{
    <div class="spinner-cargando">
        <div class="spinner"></div>
        <h3>Cargando reservas...</h3>
    </div>
}
else if (reservations == null)
{
    <div class="informacion-baseDeDatos">
        <h3>!No se pudo acceder a la base de datos!</h3>
    </div>
}
else if (reservations.Count == 0)
{
    <div class="informacion-reservas">
        <h3>!No hay reservas disponibles!</h3>
    </div>
}
else
{
    <table class="tabla-Reservation">
        <thead>
            <tr>
                <th>ReservationId</th>
                <th>Usuario</th>
                <th>material</th>
                <th>RequestDate </th>
                <th>ExpirationDate</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var reserva in reservations)
            {
                @if (reserva.Status.ToString().Equals("Pending"))
                {
                    <tr>
                        <td>@reserva.ReservationId</td>
                        <td>@(userName.ContainsKey(reserva.UserId) ? userName[reserva.UserId] : "No se pudo Cargar el Nombre")</td>
                        <td>@(materialTitles.ContainsKey(reserva.MaterialId) ? materialTitles[reserva.MaterialId] : "No se pudo Cargar el Nombre")</td>
                        <td>@reserva.RequestDate.ToString()</td>
                        <td>@reserva.ExpirationDate.ToString()</td>
                        <td>@reserva.Status.ToString()</td>
                        <td>
                            <NavLink class="btn btn-success" href="@($"/AceptarReserva/{reserva.ReservationId}/{reserva.UserId}")">
                                Crear Perestamo
                            </NavLink>

                        </td>
                        <td>
                            <NavLink class="btn btn-success" href="@($"/RechazarReserva/{reserva.ReservationId}/{reserva.UserId}")">
                                Rechazar Prestamo
                            </NavLink>

                        </td>
                    </tr>
                    
                }
                
                
                
            }
        </tbody>
    </table>
}


@code {

    public List<Reservation> reservations;
    private bool isLoading = true;

    private Dictionary<int, string> userName = new();
    private Dictionary<int, string> materialTitles = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            reservations = await reservation.ListReservations();
            await getUser(reservations);
            await getTitle(reservations);
        }
        catch
        {
            reservations = null;
        }
        finally
        {
            isLoading = false;
        }
        
    }

    private async Task getUser(List<Reservation> reservations)
    {
        foreach (var reservation in reservations)
        {
            var usuario = await userService.GetUser(reservation.UserId);
            userName[reservation.UserId] = usuario != null && usuario.Id != null
       ? $"{usuario.FirstName} {(usuario.MiddleName ?? "")} {(usuario.LastName ?? "")}".Trim()
       : "Desconocido";
        }
        StateHasChanged();
    }

    private async Task getTitle(List<Reservation> reservas)
    {
        foreach (var reserva in reservas)
        {
            var material = await materialService.GetMaterial(reserva.MaterialId);
            materialTitles[reserva.MaterialId] = material?.Title ?? "Desconocido";
            Console.WriteLine($"Material cargado: {material.MaterialId} - {material.Title}");

        }
        StateHasChanged();
    }
    
}
